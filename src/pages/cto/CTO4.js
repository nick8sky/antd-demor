import React, { Component } from 'react';
import Markdown from 'react-markdown';

class CTO4 extends Component {
    render() {
        return (
            <div>
                <Markdown source={"## 架构师路线\n" +
                "\n" +
                "Java架构师，首先要是一个高级java攻城狮，熟练使用各种框架，并知道它们实现的原理。jvm虚拟机原理、调优，懂得jvm能让你写出性能更好的代码;池技术，什么对象池，连接池，线程池…… \n" +
                "\n" +
                "Java反射技术，写框架必备的技术，但是有严重的性能问题，替代方案java字节码技术;nio，没什么好说的，值得注意的是”直接内存”的特点，使用场景;java多线程同步异步;java各种集合对象的实现原理，了解这些可以让你在解决问题时选择合适的数据结构，高效的解决问题，比如hashmap的实现原理，好多五年以上经验的人都弄不清楚，还有为什扩容时有性能问题?不弄清楚这些原理，就写不出高效的代码，还会认为自己做的很对;总之一句话越基础的东西越重要，很多人认为自己会用它们写代码了，其实仅仅是知道如何调用api而已,离会用还差的远。 \n" +
                "\n" +
                "熟练使用各种数据结构和算法，数组、哈希、链表、排序树…，一句话要么是时间换空间要么是空间换时间，这里展开可以说一大堆，需要有一定的应用经验，用于解决各种性能或业务上的问题。 \n" +
                "\n" +
                "熟练使用linux操作系统，必备，没什么好说的 。 \n" +
                "\n" +
                "熟悉tcp协议，创建连接三次握手和断开连接四次握手的整个过程，不了解的话，无法对高并发网络应用做优化; 熟悉http协议，尤其是http头，我发现好多工作五年以上的都弄不清session和cookie的生命周期以及它们之间的关联。 \n" +
                "\n" +
                "系统集群、负载均衡、反向代理、动静分离，网站静态化 。 \n" +
                "\n" +
                "分布式存储系统nfs,fastdfs,tfs,Hadoop了解他们的优缺点，适用场景 。 \n" +
                "\n" +
                "分布式缓存技术memcached,redis，提高系统性能必备，一句话，把硬盘上的内容放到内存里来提速，顺便提个算法一致性hash 。 \n" +
                "\n" +
                "工具nginx必备技能超级好用，高性能，基本不会挂掉的服务器，功能多多，解决各种问题。 \n" +
                "\n" +
                "数据库的设计能力，mysql必备，最基础的数据库工具，免费好用，对它基本的参数优化，慢查询日志分析，主从复制的配置，至少要成为半个mysql dba。其他nosql数据库如mongodb。 \n" +
                "\n" +
                "消息队列中间件。如消息推送，可以先把消息写入数据库，推送放队列服务器上，由推送服务器去队列获取处理，这样就可以将消息放数据库和队列里后直接给用户反馈，推送过程则由推送服务器和队列服务器完成，好处异步处理、缓解服务器压力，解藕系统。\n" +
                "\n" +
                "强大的自学能力 \n\n" +
                "养成阅读源码的习惯 \n" +
                "\n" +
                "\n" +
                "架构师还要根据业务发展阶段，提前预见发展到下一个阶段系统架构的解决方案，并且设计当前架构时将架构的升级扩展考虑进去，做到易于升级;否则等系统瓶颈来了，出问题了再去出方案，或现有架构无法扩展直接扔掉重做，或扩展麻烦问题一大堆，这会对企业造成损失。"}/>

            </div>
        );
    }
}

export default CTO4;