import React, { Component } from 'react';

class Svm extends Component {
    render() {
        return (
            <div>
                <h2>支持向量机 Support Vector Machine</h2>
                <p>在之前的文章感知机中提到过，感知机模型对应于特征空间中将实例划分为正负两类的分离超平面，但是，感知机的解却不止一个。对同一个数据集而言，可以计算得到很多的感知机模型，不同的感知机的 训练误差 都是一样的，都为0。</p>
                <p>那么，这些训练误差都为0的感知机模型中，如何针对当前数据集，选择一个最好的感知机模型呢？现在就需要考虑模型的 泛化误差 了。即，在所有训练误差为0的感知机中，选择泛化误差最小的那个感知机，这就是SVM算法最初的目的。</p>
                <p>基本的SVM（最大间隔分类器）是一种二分类模型，它是定义在特征空间上的间隔最大的线性分类器，间隔最大是SVM和感知机不同的地方，间隔最大化对应于泛化误差最小。</p>
                <h3>决策面</h3>
                <p>面对一个线性可分的二分类问题，将正负样本分开的超平面，称为决策面。</p>
                <p>对于线性可分的二分类问题而言，使用 感知机 算法，可以得到很多很多满足上述要求的决策面，比如下图中，就是可以将正负两类数据分开的两个决策面。</p>
                <p><img src={require('../../img/Perceptron_cant_choose.png')} style={{height:"60%",width:"60%"}}/></p>
                <p>那么，在这些决策面中，哪个决策面，才是最优的决策面呢？ </p>
                <p>最大间隔分类器认为，决策面的泛化误差可以用训练样本集合中，离决策面最近的样本点到决策面的间隔（margin）来表示，离决策面最近的样本点。直观的来讲，最优决策面差不多就是下面这幅图中，中间的那个决策面。</p>
                <p><img src={require('../../img/234903457.jpg')} style={{height:"40%",width:"40%"}}/></p>
                <p>什么是间隔？
                    答：首先，要搞清楚是谁和谁的间隔，在这里指的是一个 训练样本点 和 决策面 之间的间隔。</p>
                <p>那么，间隔又如何定义的呢？
                    答：间隔，就是样本点到决策面之间的距离。</p>
                <p>那么，间隔最大化又如何定义的呢？ </p>
                <p>答：上一步找到了两条平行的直线，各自对 训练样本点 都是最近的间隔，但对彼此的训练样本点 却不是最近的间隔，基本上取两条线中间的那条就是最小间隔最大化的决策面。为什么要这么命名。。。</p>

            </div>
        );
    }
}

export default Svm;